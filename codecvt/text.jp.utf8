UTFまたはエンコーディングフォームに関連する一般的な質問
Q：Unicodeは16ビットエンコーディングですか？

A：いいえ。Unicodeの最初のバージョンは1991年から1995年まで16ビットエンコーディングでしたが、Unicode 2.0（1996年7月）以降、16ビットエンコーディングではありませんでした。Unicode標準は、U + 0000..U + 10FFFFの範囲の文字をエンコードします。これは、21ビットのコードスペースに相当します。選択したエンコード形式（UTF-8、UTF-16、またはUTF-32）に応じて、各文字は1〜4個の8ビットバイト、1個または2個の16ビットコードユニットのシーケンスとして表されます。または単一の32ビットコードユニット。

Q：Unicodeテキストは複数の方法で表現できますか？

A：はい、UTF-8、UTF-16、UTF-32など、Unicodeデータの表現にはいくつかの可能性があります。さらに、UTS＃6：A Standard Compression Scheme for Unicode（SCSU）で説明されているような圧縮変換があります 。

Q：UTFとは何ですか？

A：Unicode変換形式（UTF）は、すべてのUnicodeコードポイント（代理コードポイントを除く）から一意のバイトシーケンスへのアルゴリズムマッピングです。ISO / IEC 10646標準では、UTFに「UCS変​​換形式」という用語を使用しています。2つの用語は、同じ概念の同義語にすぎません。

各UTFはリバーシブルであるため、すべてのUTFはロスレスラウンドトリップをサポートします。Unicodeでコード化された文字シーケンスSからバイトシーケンスにマッピングすると、Sが再び生成されます。ラウンドトリップを確実にするには、UTFマッピングですべてのコードポイント（代理コードポイントを除く）を一意のバイトシーケンスにマップする 必要があります。これには、予約済み（割り当てられていない）コードポイントと66個の非文字 （U + FFFEおよびU + FFFFを含む）が含まれます。

SCSUの 同じ文字列が特定のSCSU圧縮に応じて、非常に多くの異なるバイトシーケンスにマップすることができるので、圧縮方法は、それが可逆的であるにも関わらず、UTFではありません。[AF]

Q：エンコードフォームの詳細はどこで入手できますか？

A：UTFの正式な定義については、セクション3.9、Unicode標準のUnicodeエンコーディングフォームを参照してください 。エンコード形式の詳細については、UTR＃17：Unicode文字エンコードモデルを参照してください。 [AF]

Q：UTFコンバーターを作成するにはどうすればよいですか？

A：無料で入手できるオープンソースプロジェクトのInternational Components for Unicode（ICU）には、UTF変換が組み込まれています。最新バージョンは、ICUプロジェクトのWebサイトからダウンロードできます。[AF]

Q：UTFによって生成されないバイトシーケンスはありますか？それらをどのように解釈すればよいですか？

A：どのUTFもすべての任意のバイトシーケンスを生成できません。例えば、UTF-8形式110xxxxxのすべてのバイト2は なければならない形式10xxxxxxにのバイトが続くこと2。<110xxxxx 2 0xxxxxxx 2 >などのシーケンスは不正であり、決して生成してはなりません。この違法なバイトシーケンスに直面したとき転換または解釈しながら、UTF-8準拠法は、最初のバイトを処理しなければならない110xxxxx 2不正な終了エラーとして：たとえば、エラーを通知するか、バイトをフィルターで除外するか、FFFD（REPLACEMENT CHARACTER）などのマーカーでバイトを表します。後者の2つのケースでは、第二のバイト0xxxxxxxの処理を続行します2。

準拠プロセスは、不正または不正な形式のバイトシーケンスを文字として解釈してはなりませんが、エラー回復アクションを実行する場合があります。適合プロセスでは、不規則なバイトシーケンスを使用して帯域外情報をエンコードすることはできません。

Q：どのUTFをサポートする必要がありますか？

A：UTF-8はWebで最も一般的です。UTF-16はJavaとWindowsで使用されます。UTF-8およびUTF-32は、LinuxおよびさまざまなUnixシステムで使用されます。それらすべての間の変換は、アルゴリズムに基づいており、高速でロスレスです。これにより、内部ストレージまたは処理に特定のUTFを使用しながら、複数の形式でのデータ入力または出力を簡単にサポートできます。  [AF]

Q：UTFの違いは何ですか？

A：次の表は、各UTFのプロパティの一部をまとめたものです。 

名前	UTF-8	UTF-16	UTF-16BE	UTF-16LE	UTF-32	UTF-32BE	UTF-32LE
最小のコードポイント	0000	0000	0000	0000	0000	0000	0000
最大のコードポイント	10FFFF	10FFFF	10FFFF	10FFFF	10FFFF	10FFFF	10FFFF
コードユニットサイズ	8ビット	16ビット	16ビット	16ビット	32ビット	32ビット	32ビット
バイトオーダー	該当なし	<BOM>	ビッグエンディアン	リトルエンディアン	<BOM>	ビッグエンディアン	リトルエンディアン
文字あたりの最小バイト数	1	2	2	2	4	4	4
1文字あたりのほとんどのバイト	4	4	4	4	4	4	4
表中の<BOM>は、データストリームの先頭に存在する場合はバイトオーダーマークによってバイトオーダーが決定されることを示し、それ以外の場合はビッグエンディアンであることを示します。 [AF]

Q：UTF-16LEなど、一部のUTFのラベルにBEまたはLEが含まれているのはなぜですか？

A：UTF-16とUTF-32は、それぞれ2バイトと4バイトの長さのコードユニットを使用します。これらのUTFには、BE、LE、およびマークなしの3つのサブフレーバーがあります。BEフォームはビッグエンディアンバイトシリアル化（最上位バイトが最初）を使用し、LEフォームはリトルエンディアンバイトシリアル化（最下位バイトが最初）を使用し、マークされていないフォームはデフォルトでビッグエンディアンバイトシリアル化を使用しますが、バイト順序が含まれる場合があります使用される実際のバイトシリアル化を示すために、先頭にマークを付けます。[AF]

Q：8ビットASCIIストリームに適合するようにUnicode文字をパッケージ化する標準的な方法はありますか？

A：Unicodeを8ビット形式に適合させるには3つまたは4つのオプションがあります。

a）UTF-8を使用します。127を超える文字はLatin-1とは異なるため、これはASCIIを保持しますが、Latin-1は保持しません。UTF-8は、ASCII文字に対してのみASCIIのバイトを使用します。したがって、ファイル名構文、マークアップ言語など、ASCII文字が構文文字として重要であるが、他のすべての文字が任意のバイトを使用する可能性がある環境でうまく機能します。
例：「Acuteを含むラテン文字」（015B）は、2バイトとしてエンコードされます：C59B。

b）\ uXXXXXまたは\ xXXXXXの形式のJavaまたはCスタイルのエスケープを使用します。この形式はテキストファイルの標準ではありませんが、主にソースファイルについて、問題の言語のフレームワークで明確に定義されています。
例：中央に「LatinSmall Letter s with Acute」（015B）が付いたポーランド語の「wyjście」（śは1文字）は、「wyj \ u015Bcie」のようになります。

c）HTMLまたはXMLの場合と同様に、&#xXXXX;または&#DDDDD;数字のエスケープを使用します。繰り返しますが、これらはプレーンテキストファイルの標準ではありませんが、これらのマークアップ言語のフレームワーク内で明確に定義されています。
例：「wyjście」は「wyj&#x015B;cie」のようになります

d）SCSUを使用します。この形式は、Unicodeを8ビット形式に圧縮し、ASCIIの大部分を保持しますが、一部の制御コードをデコーダーのコマンドとして使用します。ただし、ASCIIテキストはSCSUでエンコードされた後はASCIIテキストのように見えますが、他の文字が同じバイト値でエンコードされる場合があり、SCSUは任意のバイトをASCII文字として盲目的に解釈する8ビットチャネルには不適切です。
例：「<SC2>wyjÛcie」ここで、<SC2>はバイト0x12を示し、「Û」はバイト0xDBに対応します。[AF]

Q：これらのアプローチのどれが最適ですか？

A：状況によって異なります。これら4つのアプローチのうち、d）使用するスペースは最小ですが、ほとんどの8ビット環境では透過的に使用できません。A）、または最も広く、最もスペースを使用）プレーンテキストファイル、およびb）とcでサポートされているが、広くJavaとCでプログラムのソースファイルではサポートされている内にそれぞれHTMLとXMLファイル。  [AF]

Q：これらのフォーマットのどれが最も標準的ですか？

A：4つすべてで、受信者がその形式を理解できる必要がありますが、a）は3つの同等のUnicodeエンコーディングフォームの1つと見なされるため、標準です。与えられたコンテキスト外でのb）またはc）の使用は、間違いなく非標準と見なされますが、内部データ送信の優れたソリューションになる可能性があります。SCSUの使用自体は（圧縮データストリームの）標準ですが、SCSUをサポートする汎用レシーバーはほとんどないため、内部データ送信で最も役立ちます。[AF]

UTF-8 FAQ
Q：UTF-8の定義は何ですか？

A：UTF-8は、Unicodeのバイト指向のエンコード形式です。その定義の詳細については、Unicode標準のセクション2.5「エンコーディングフォーム」およびセクション3.9「Unicodeエンコーディングフォーム」を参照してください。特に、表3-6UTF-8ビット分布 および表3-7整形式UTF-8バイトシーケンスを参照してください。これらはエンコード形式の簡潔な要約を示しています。 Unicode技術委員会は、一意のシーケンスをより厳密に適用し、特定の無効な文字のエンコードを禁止するために、UTF-8の定義を徐々に強化してきたため、必ず最新バージョンのUnicode標準を参照してください。インターネットがあります UTF-8に関するRFC3629。UTF-8は、ISO / IEC10646のAnnexDでも定義されています。上記の質問「UTFコンバーターを作成するにはどうすればよいですか？」も参照してください。

Q：UTF-8エンコーディングスキームは、基盤となるプロセッサがリトルエンディアンであるかビッグエンディアンであるかに関係なく同じですか？

A：はい。UTF-8はバイトのシーケンスとして解釈されるため、16ビットまたは32ビットのコード単位を使用するエンコード形式の場合のようにエンディアンの問題はありません。BOMがUTF-8で使用される場合、BOMはUTF-8を他のエンコーディングと区別するためのエンコーディング署名として のみ使用されます—バイトオーダーとは関係ありません。  [AF]

Q：基盤となるシステムがASCIIまたはEBCDICエンコーディングを使用しているかどうかに関係なく、UTF-8エンコーディングスキームは同じですか？

A：UTF-8の定義は1つだけです。データがASCIIまたはEBCDICベースの文字セットから変換されたかどうかはまったく同じです。ただし、ASCIIとEBCDICの間で制御コードの配置が異なるため、標準UTF-8のバイトシーケンスはEBCDICシステムではうまく相互運用できません。 UTR＃16：UTF-EBCDIC定義は、EBCDICシステムで相互運用する特殊なUTFです。 [AF]

Q：<D800 DC00>などのUTF-16サロゲートペアをUTF-8に変換するにはどうすればよいですか？1つの4バイトシーケンスとして、または2つの別々の3バイトシーケンスとして？

A：UTF-8の定義では、補足文字（UTF-16でサロゲートペアを使用する文字）を単一の4バイトシーケンスでエンコードする必要があります。ただし、古いソフトウェア、特にUTF-16の導入より前のソフトウェア、または特定の制約の下でUTF-16環境と相互運用しているソフトウェアで、3バイトシーケンスのペアを生成する方法が広く行われています。このようなエンコーディングは 、定義されているUTF-8に準拠していません。このような非UTF-8データ形式の正式な説明については、UTR＃26：UTF-16の互換性エンコーディングスキーム：8ビット（CESU）を参照してください。CESU-8を使用する場合は、形式が類似しているため、データが誤ってUTF-8であるかのように扱われないように細心の注意を払う必要があります。 [AF]

Q：ペアになっていないUTF-16サロゲートをUTF-8に変換するにはどうすればよいですか？

不正な形式のUTF-16データを変換するときに、ペアになっていないサロゲートが検出されると、別の問題が発生します。このようなペアになっていないサロゲートをそれ自体で3バイトのシーケンスとして表すと、結果のUTF-8データストリームの形式が正しくなくなります。入力の性質を忠実に反映していますが、Unicodeに準拠するには、エンコード形式の変換によって常に有効なデータストリームが生成される必要があります。したがって、コンバーターはこれをエラーとして処理する必要があります。[AF]

UTF-16 FAQ
Q：UTF-16とは何ですか？

A：UTF-16は、単一の16ビットコードユニットを使用して最も一般的な63K文字をエンコードし、サロゲートと呼ばれる16ビットコードユニットのペアを使用して、Unicodeであまり使用されない1M文字をエンコードします。

もともと、Unicodeは、すべての最新のスクリプトを表すことを目的とした、純粋な16ビットエンコーディングとして設計されました。（古代のスクリプトは私用の文字で表されることになりました。）時間の経過とともに、特にレガシーセットとの互換性のために14,500を超える複合文字が追加された後、ユーザーコミュニティにとって16ビットでは不十分であることが明らかになりました。この中からUTF-16が生まれました。 [AF]

Q：サロゲートとは何ですか？

A：サロゲートは、Unicode値の2つの特別な範囲からのコードポイントであり、UTF-16のペアのコードユニットの先頭と末尾の値として使用するために予約されています。大手とも呼ばれる高、サロゲートはD800からある16 DBFFに16、および末尾、または低い、サロゲートはDC00からある16 DFFFに16。それらは文字を直接表すのではなく、ペアとしてのみ表すため、サロゲートと呼ばれます。

Q：UTF-16から文字コードに変換するアルゴリズムは何ですか？

A：以前は短いアルゴリズムが含まれていたUnicode標準でしたが、現在はビット分布テーブルのみがあります。これは、ビット分散テーブルからの情報をUTF-16との間で変換するCコードに変換する3つの短いコードスニペットです。

次の型定義を使用する

typedef unsigned int16 UTF16; 
typedef unsigned int32 UTF32;
最初のスニペットは、文字コードCから上位（または先行）サロゲートを計算します。

const UTF16 HI_SURROGATE_START = 0xD800
UTF16 X =（UTF16）C; 
UTF32 U =（C >> 16）＆（（1 << 5）-1）; 
UTF16 W =（UTF16）U-1; 
UTF16 HiSurrogate = HI_SURROGATE_START | （W << 6）| X >> 10;
ここで、X、U、およびWは、表3-5UTF-16ビット分布で使用されているラベルに対応します。次のスニペットは、低いサロゲートに対して同じことを行います。

const UTF16 LO_SURROGATE_START = 0xDC00
UTF16 X =（UTF16）C; 
UTF16 LoSurrogate =（UTF16）（LO_SURROGATE_START | X＆（（1 << 10）-1））;
最後に、逆です。ここで、hiとloは高位と低位の代理であり、Cは結果の文字です。

UTF32 X =（hi＆（（1 << 6）-1））<< 10 | lo＆（（1 << 10）-1）; 
UTF32 W =（hi >> 6）＆（（1 << 5）-1）; 
UTF32 U = W + 1;
UTF32 C = U << 16 | バツ;
呼び出し元は、C、hi、およびloが適切な範囲内にあることを確認する必要があります。[AF]

Q：これを行う簡単な方法はありませんか？

A：ビット分布テーブルに従おうとしないはるかに単純な計算があります。

//定数
constUTF32 LEAD_OFFSET = 0xD800-（0x10000 >> 10）; 
const UTF32 SURROGATE_OFFSET = 0x10000-（0xD800 << 10）-0xDC00; 

//計算
UTF16リード= LEAD_OFFSET +（コードポイント>> 10）; 
UTF16トレイル= 0xDC00 +（コードポイント＆0x3FF）; 

UTF32コードポイント=（リード<< 10）+トレイル+ SURROGATE_OFFSET;
[MD]

Q：UTF-16に反対する人がいるのはなぜですか？

A：Shift-JIS（SJIS）などの可変幅の東アジア文字セットに精通している人は、1つの文字を表すために2つのコードユニットが必要になることがあるUTF-16に当然のことながら神経質になっています。彼らは、可変幅コードが引き起こした問題に精通しています。ただし、SJISとUTF-16で使用されるメカニズムにはいくつかの重要な違いがあります。

オーバーラップ：

SJISでは、先頭と末尾のコード単位の値、および末尾と単一のコード単位の値が重複しています。これにより、いくつかの問題が発生します。

誤った一致が発生します。たとえば、「a」を検索すると、日本語の文字の末尾のコード単位と一致する場合があります。

効率的なランダムアクセスを妨げます。文字の境界にいるかどうかを知るには、逆方向に検索して既知の境界を見つける必要があります。

それはテキストを非常に壊れやすくします。ユニットが先頭と末尾のコードのユニットペアから削除されると、後続の多くの文字が破損する可能性があります。

UTF-16では、単一ユニットだけでなく、高サロゲートと低サロゲートのコードポイント範囲はすべて完全に互いに素です。これらの問題はいずれも発生しません。

誤一致はありません。

文字境界の位置は、各コードユニット値から直接決定できます。

ドロップされたサロゲートは、1文字のみを破損します。

周波数：

SJIS文字の大部分は2単位を必要としますが、単一単位を使用する文字は一般的に発生し、ファイル名などで特に重要になることがよくあります。

UTF-16では、2単位を必要とする文字は比較的少数です。一般的に使用されている文字の大部分は、単一のコード単位です。東アジアのテキストでも、代理ペアの発生率は、平均してすべてのテキストストレージの1％未満である必要があります。（もちろん、phthisiqueが英語でかなりまれな単語であるように、特定のドキュメントでは代理ペアの発生率が高くなる可能性がありますが、特定の学術テキストで頻繁に発生する可能性があります。） [AF]

Q：UTF-16が100万文字以上に拡張されることはありますか？

A：いいえ。UnicodeとISO 10646の両方に、現在のUTF-16（0〜1,114,111）で表現できる整数範囲に将来のコード割り当てを正式に制限するポリシーがあります。他のエンコード形式（つまり、他のUTF）がより大きな整数を表すことができる場合でも、これらのポリシーは、すべてのエンコード形式が常に同じ文字セットを表すことを意味します。グリフではなく、文字をエンコードするUnicodeの目標には、100万を超える可能なコードで十分です。Unicodeはそうではありません任意のデータをエンコードするように設計されています。たとえば、「歴史を通して紙に書かれたキャラクターのインスタンス」にそれぞれ独自のコードを付けたい場合は、そのようなコードが数兆または4兆個必要になることがあります。この努力は気高いかもしれませんが、そのようなエンコーディングにはUnicodeを使用しません。 [AF]

Q：無効な16ビット値はありますか？

A：ペアになっていないサロゲートはUTFでは無効です。これらは、範囲D800の任意の値が挙げられる16 DBFFに16範囲DC00の値が続かない16 DFFFの16、又は範囲内の任意の値DC00 16 DFFFの16範囲D800の値が付いていない16 DBFFに16。[AF]

Q：文字以外はどうですか？それらは無効ですか？

A：まったく違います。非文字はUTFで有効であり、適切に変換する必要があります。非文字の定義と使用、および各UTFでの正しい表現の詳細については、非文字に関するFAQを参照してください。

Q：ほとんどの補足文字は一般的ではないので、それは私がそれらを無視できることを意味しますか？

A：ほとんどの補足文字（UTF-16では代理ペアで表されます）はあまり一般的ではありません。ただし、それは補足文字を無視する必要があるという意味ではありません。その中には、非常に人気のある多くの個性的なキャラクターや、東アジアの調達仕様にとって重要な多くのセットがあります。注目すべき補足文字は次のとおりです。

多くの人気の絵文字と絵文字

WingdingsおよびWebdingsとの相互運用に使用される記号

個人名や地名など、調達に重要なCJK文字の多数の小さなセット

すべての表意文字のバリエーションシーケンスに使用されるバリエーションセレクター

一部のユーザーコミュニティにとって重要な多数の少数派スクリプト

エジプトの象形文字など、いくつかの非常に顕著な歴史的なスクリプト

Ken Lundeには、このトピックに関する興味深いプレゼンテーションファイルがあり、トップ10リストがあります。BMPコードポイントを超えてサポートする理由

Q：コード内の補足文字をどのように処理する必要がありますか？

A：全体としてBMP文字と比較すると、補足文字はテキストであまり一般的ではありません。これは、何千もの補足文字が標準に追加され、人気のある絵文字などのいくつかの個別の文字が非常に一般的になっているにもかかわらず、現在も当てはまります。実装を最適化して最高のパフォーマンス（実行速度、メモリ使用量、データストレージ）を実現する場合は、BMP文字とBMP内のASCIIサブセットの相対頻度を考慮することができます。

このような戦略は、BMP文字が処理または格納するために1つの16ビットコードユニットを必要とするのに対し、補助文字は2つを必要とするUTF-16実装に特に役立ちます。

BMPを最適化する戦略は、UTF-8の実装にはあまり役立ちませんが、データの分散がそれを正当化する場合、ASCIIサブセットの最適化は意味があります。そのサブセットはUTF-8での処理と保存に1バイトしか必要としないためです。 。

Q：UCS-2とUTF-16の違いは何ですか？

A：UCS-2は廃止された用語であり、サロゲートコードポイントとUTF-16が標準のバージョン2.0に追加される前は、 Unicode1.1までのUnicode実装を指します。この用語は今や避けるべきです。

UCS-2は、UTF-16とは異なるデータ形式を記述していません。これは、両方がまったく同じ16ビットコードユニット表現を使用しているためです。ただし、UCS-2はサロゲートコードポイントを解釈しないため、補足文字を適合して表すために使用することはできません。

過去に、実装が「UCS-2」とラベル付けされて、補足文字をサポートせず、代理コードポイントのペアを文字として解釈しないことを示す場合がありました。このような実装では、補足文字の文字プロパティ、コードポイント境界、照合順序などの処理は処理されません。[AF]

UTF-32 FAQ
Q：UTF-32とは何ですか？

A：任意のUnicode文字は、UTF-32では単一の32ビット単位として表すことができます。この単一の4コード単位は、Unicode文字に関連付けられた抽象数であるUnicodeスカラー値に対応します。UTF-32は、ISO 10646のUCS-4と呼ばれるエンコードメカニズムのサブセットです。詳細については、セクション3.9、Unicode標準のUnicodeエンコード形式を参照してください。 [AF]

Q：Unicode文字列をメモリに格納するためにUTF-32（またはUCS-4）を使用する必要がありますか？

A：これは状況によって異なります。文字列パラメータがUTF-32である必要があるAPIに頻繁にアクセスする必要がある場合は、UTF-32文字列を常に操作する方が便利な場合があります。ただし、UTF-32の欠点は、21ビットしか必要ない場合に、各文字に32ビットを使用する必要があることです。一般的なテキストの平均的な文字に必要な有効ビットの数ははるかに少なく、比率は事実上はるかに悪くなります。多くの場合、問題ではなく、文字ごとに固定数のコード単位を持つことの利便性が決定要因になる可能性があります。

同じ文字数のストレージを増やすと、大量のテキストデータを処理するアプリケーションでコストがかかります。つまり、キャッシュ制限をより早く使い果たす可能性があります。その結果、読み取り/書き込み時間が著しく増加したり、帯域幅の制限に達したりする可能性があります。そしてそれは貯蔵のためにより多くのスペースを必要とします。多くの実装では、文字列をUTF-16で表現しますが、個々の文字値はUTF-32で表現します。

Unicodeの主なセールスポイントは、世界中のすべての文字の表現を提供し、複数の文字セットをジャグリングする必要をなくし、関連するデータ破損の問題を回避することです。これらの機能は、業界をUnicode（UTF-16）の使用側に振り向けるのに十分でした。UTF-32表現はプログラミングモデルをいくらか単純にしますが、平均ストレージサイズの増加には実際の欠点があり、UTF-32への完全な移行の魅力が低下します。 [AF]

Q：APIでUTF-32インターフェイスを使用するのはどうですか？

A：テキストをUTF-32としてメモリに格納する一部の環境を除いて、ほとんどのUnicodeAPIはUTF-16を使用しています。UTF-16 APIでは、低レベルのインデックス作成はストレージまたはコードユニットレベルで行われ、コードユニットの観点から境界を指定する書記素または単語の高レベルのメカニズムが使用されます。これにより、低レベルで効率が向上し、高レベルで必要な機能が提供されます。

n番目の 文字を見つける必要がある場合は、文字による索引付けを高レベルの操作として実装できます。ただし、このようなUTF-16コードユニットインデックスから文字インデックスへの変換、またはその逆の変換は非常に簡単ですが、16ビットユニットからインデックスポイントまでのスキャンが必要です。たとえば、テスト実行では、コード単位ではなく文字としてUTF-16ストレージにアクセスすると、10倍の劣化が発生しました。実行できる興味深い最適化がいくつかありますが、平均すると常に遅くなります。したがって、書記素、単語、行、文の境界などの他の境界の検索は、中間の文字コードインデックスを介して間接的にではなく、コードユニットインデックスから直接行われます。

Q：UTF-32文字APIではなくUTF-16文字列APIしかない場合に問題が発生しませんか？

A：ほとんどすべての国際関数（大文字、小文字、大文字小文字の区別、大文字と小文字の区別、描画、測定、照合、音訳、書記素、単語、改行など）は、単一のコードポイントではなく、APIの 文字列パラメーターを受け取る必要があります。（UTF-32）。単一のコードポイントAPIは、非常に単純な言語を除いて、ほとんどの場合、間違った結果を生成します。これは、正しい答えを取得するためにより多くのコンテキストが必要なため、または正しい答えを返すために文字のシーケンスを生成する必要があるため、あるいはその両方のためです。

たとえば、Unicode準拠の照合（UTS＃10：Unicode Collat​​ion Algogrithm（UCA）を参照）は、複数のコードポイントのシーケンスを処理し、そのシーケンスを単一のエンティティとして扱うことができる必要があります。一度に1つのコードポイントを処理して照合しようとすると、間違った答えが返されます。一度に1つのコードポイントでテキストを描画または測定する場合も同じことが起こります。アラビア語のようなスクリプトは状況に応じたものであるため、xの幅とyの幅の合計はxyの幅と等しくありません。 。基本的なタイポグラフィを超えたら、英語にも同じことが言えます。カーニングと合字のため、フォントの「fi」の幅は、「f」の幅に「i」の幅を加えたものとは異なる場合があります。ケーシング操作では、単一のコードポイントではなく文字列を返す必要があります 。http：// wwwを参照してください。.unicode.org / charts / case /。特に、タイトルケーシング操作では、一度に1つのコードポイントではなく、入力として文字列が必要です。

文字列の代わりに構造体またはクラスに単一のコードポイントを格納すると、スロバキア語の「ch」などの書記素のサポートが除外されます。単一のコードポイントでは不十分な場合がありますが、必要なものを表現するには文字シーケンスが必要です。 。言い換えれば、ほとんどのAPIのパラメータや複合データ型のフィールドはすべき ではない文字として定義されていますが、文字列としてします。また、文字列の場合、文字列の内部表現が何であるかは問題ではありません。

産業用の強力なテキストおよび国際化サポートAPIは文字のシーケンスを処理できる必要があることを考えると、文字列がUTF-16コードユニットのシーケンスによって内部的に表されるか、コードポイントのシーケンスによって表されるかはほとんど違いがありません（ = UTF-32コード単位）。UTF-16とUTF-8はどちらも、特定のコードポイントのコードユニットのシーケンスが一意であるという事実により、部分文字列の操作を容易にするように設計されています。[AF]

Q：APIで文字列パラメーターを排他的に使用するという規則に例外はありますか？

A：主な例外は、文字プロパティの取得などの非常に低レベルの操作です（たとえば、UCDの一般カテゴリまたは正規クラス）。それらの場合、UTF-16およびUTF-32との間ですばやく変換し、UTF-32値を返す文字列を反復処理できるインターフェイスがあると便利です（内部形式はUTF-16ですが）。

Q：<D800 DC00>などのUTF-16サロゲートペアをUTF-32に変換するにはどうすればよいですか？1つの4バイトシーケンスとして、または2つの4バイトシーケンスとして？

A：UTF-32の定義では、補足文字（UTF-16で代理ペアを使用する文字）を単一の4バイトシーケンスでエンコードする必要があります。

Q：ペアになっていないUTF-16サロゲートをUTF-32に変換するにはどうすればよいですか？

A：不正な形式のUTF-16データを変換するときにペアになっていないサロゲートが検出された場合、準拠するコンバーターは これをエラーとして処理する必要があります。このような対になっていないサロゲートを単独で表すことにより、結果のUTF-32データストリームの形式が正しくなくなります。入力の性質を忠実に反映していますが、Unicodeに準拠するには、エンコード形式の変換で常に有効なデータストリームが生成される必要があります。[AF]

バイトオーダーマーク（BOM）に関するFAQ
Q：BOMとは何ですか？

A：バイトオーダーマーク（BOM）は、データストリームの先頭にある文字コードU + FEFFで構成され、主にマークされていないプレーンテキストファイルのバイトオーダーとエンコード形式を定義する署名として使用できます。一部の高レベルプロトコルでは、そのプロトコルで定義されているUnicodeデータストリームでBOMの使用が必須（または禁止）になっている場合があります。 [AF]

Q：BOMはどこで役立ちますか？

A：BOMは、テキストとして入力されているが、ビッグエンディアン形式かリトルエンディアン形式かがわからないファイルの先頭で役立ちます。ファイルがUnicodeであることを示すヒントとしても機能します。従来のエンコーディングとは対照的に、さらに、使用される特定のエンコーディング形式の署名として機能します。[AF]

Q：「エンディアン」とはどういう意味ですか？

A：1バイトより長いデータ型は、最上位バイト（MSB）が最初または最後のコンピューターメモリに格納できます。前者はビッグエンディアン、後者はリトルエンディアンと呼ばれます。データが交換されると、送信システムで「正しい」順序で表示されるバイトが、受信システムで順序が狂っているように見える場合があります。その場合、BOMは文字以外の0xFFFEのようになり、受信システムはデータを処理する前にバイト反転を適用できます。UTF-8はバイト指向であるため、その問題はありません。それでも、最初のBOMは、データストリームをUTF-8として識別するのに役立つ場合があります。[AF]

Q：BOMを使用する場合、16ビットのUnicodeテキストのみですか？

A：いいえ、Unicodeテキストがどのように変換されても（UTF-16、UTF-8、またはUTF-32）、BOMを署名として使用できます。BOMを構成する正確なバイトは、その変換形式によってU + FEFFが変換されるUnicode文字になります。その形式では、BOMは、それがUnicodeファイルであることと、どの形式であるかを示すのに役立ちます。例：

バイト	エンコーディングフォーム
00 00 FE FF	UTF-32、ビッグエンディアン
FF FE 00 00	UTF-32、リトルエンディアン
FE FF	UTF-16、ビッグエンディアン
FF FE	UTF-16、リトルエンディアン
EF BB BF	UTF-8
Q：UTF-8データストリームにBOM文字（UTF-8形式）を含めることはできますか？はいの場合でも、残りのUTF-8バイトはビッグエンディアンの順序であると想定できますか？

A：はい、UTF-8にはBOMを含めることができます。ただし、 バイトストリームのエンディアンに関しては違いはありません。UTF-8のバイト順序は常に同じです。最初のBOMは署名としてのみ使用されます。これは、マークされていないテキストファイルがUTF-8にあることを示します。UTF-8でエンコードされたデータの一部の受信者はBOMを期待しないことに注意してください。UTF-8が8ビット環境で透過的に使用される場合、BOMの使用は、「＃！」の使用など、最初に特定のASCII文字を予期するプロトコルまたはファイル形式に干渉します。Unixシェルスクリプトの冒頭にあります。 [AF]

Q：ファイルの途中でU + FEFFを使用するにはどうすればよいですか？

A：BOMとしての使用をサポートするプロトコルがなく、テキストストリームの先頭にない場合、通常はU + FEFFは発生しません。下位互換性のために、ゼロ幅の改行なしスペース（ZWNBSP）として扱われる必要があり、ファイルまたは文字列のコンテンツの一部になります。U + 2060 WORD JOINERの使用は、BOMと混同できないため、単語結合のセマンティクスを表現するためにZWNBSPよりも強く推奨されます。マークアップ言語またはデータプロトコルを設計する場合、U + FEFFの使用をバイトオーダーマークの使用に制限できます。その場合、ファイルの途中で発生するU + FEFFは、サポートされていない文字として扱うことができます 。 [AF]

Q：テキストの先頭にBOMがあるプロトコルを使用しています。最初のZWNBSPを表すにはどうすればよいですか？

A：代わりにU + 2060 WORDJOINERを使用してください。 

Q：U + FEFFをBOMとして解釈しないデータにタグを付けるにはどうすればよいですか？

A：タグUTF-16BEを使用してビッグエンディアンのUTF-16テキストを示し、UTF-16LEを使用してリトルエンディアンのUTF-16テキストを示します。BOMを使用する場合は、テキストに単純なUTF-16のタグを付けます。 [MD]

Q：BOMを必要とするプロトコルを常に使用しないのはなぜですか？

A：データベースのフィールドなど、データに関連付けられたタイプがある場合、BOMは不要です。特に、テキストデータストリームがUTF-16BE、UTF-16LE、UTF-32BE、またはUTF-32LEとしてマークされている場合、BOMは不要であり、許可されていません。U + FEFFは、ZWNBSPとして解釈されます。

データベースまたはフィールドのセット内のすべての文字列にBOMのタグを付けないでください。スペースが無駄になり、文字列の連結が複雑になります。さらに、2つのデータフィールドの内容はまったく同じであるが、バイナリが等しくない場合もあります（1つがBOMで始まる場合）。

Q：BOMをどのように処理する必要がありますか？

A：従うべきガイドラインは次のとおりです。

特定のプロトコル（たとえば、.txtファイルに関するMicrosoftの規則）では、ファイルなどの特定のUnicodeデータストリームでBOMを使用する必要がある場合があります。このようなプロトコルに準拠する必要がある場合は、BOMを使用してください。

一部のプロトコルでは、タグなしテキストの場合にオプションのBOMが許可されます。そのような場合、

テキストデータストリームがプレーンテキストであることがわかっているが、エンコーディングが不明な場合、BOMを署名として使用できます。BOMがない場合、エンコーディングは何でもかまいません。

テキストデータストリームがプレーンUnicodeテキストであることがわかっている場合（ただし、どのエンディアンではないか）、BOMを署名として使用できます。BOMがない場合、テキストはビッグエンディアンとして解釈する必要があります。

一部のバイト指向プロトコルでは、ファイルの先頭にASCII文字が必要です。これらのプロトコルでUTF-8を使用する場合は、エンコード形式の署名としてBOMを使用しないでください。

データストリームの正確なタイプがわかっている場合（UnicodeビッグエンディアンまたはUnicodeリトルエンディアンなど）、BOMは使用しないでください。具体的には、いつでもデータストリームは、BOMがUTF-32BEまたはUTF-32LE、UTF-16BE、UTF-16LEであると宣言されなければならない使用されません。（Q：UCS-2とUTF-16の違いは何ですか？も参照してください。） [AF]
